{"ast":null,"code":"var _jsxFileName = \"/home/lucca/Documents/github/repro/front-end/reprografia_front-end/src/pages/myRequests/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport ProfileContainer from \"../../components/profileContainer\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MyRequests = () => {\n  _s();\n\n  const history = useHistory();\n  var [pedidos, setPedidos] = useState({\n    status: false,\n    list: [],\n    message: \"\"\n  });\n  var [nameUser, setNameUser] = useState();\n  var [image, setImage] = useState();\n  useEffect(() => {\n    axios.get(\"http://localhost:3002/meusPedidos\", {\n      headers: {\n        accessToken: localStorage.getItem(\"accessToken\")\n      }\n    }).then(result => {\n      console.log(result);\n\n      if (result.data.length > 0) {\n        result.data.map(data => {\n          if (data.avaliacao_pedido === \"Ainda não avaliado.\") {\n            data.avaliacao_pedido = \"Ainda Não avaliado! | Criado em:\" + data.criado; //Setei algumas coisas para os elementos do nosso data, para que possamos usar isso no map lá embaixo,\n            //e renderizar coisas diferentes dependendo do status da avaliação (se tiver sido avaliado fica de uma forma,\n            // se não fica de outra, etc...)\n\n            data.criado = {\n              color: \"red\",\n              margin: \"10px\"\n            }; //Aqui usei o campo de avaliado para mostrar o botão de avaliar caso o pedido ainda não tenha sido avaliado.\n\n            data.avaliado = false;\n          } else {\n            data.avaliacao_pedido += \" | Atualizado em:\" + data.atualizado; //Setei algumas coisas para os elementos do nosso data, para que possamos usar isso no map lá embaixo,\n            //e renderizar coisas diferentes dependendo do status da avaliação (se tiver sido avaliado fica de uma forma,\n            // se não fica de outra, etc...)\n\n            data.criado = {\n              color: \"green\",\n              margin: \"10px\"\n            }; //Aqui usei o campo de avaliado para mostrar o botão de avaliar caso o pedido ainda não tenha sido avaliado.\n\n            data.avaliado = true;\n          }\n\n          return null;\n        });\n        setPedidos({\n          list: result.data,\n          status: true\n        });\n      } else {\n        setPedidos({\n          message: result.data.message\n        });\n      }\n    });\n    axios.get(\"http://localhost:3002/meuUsuario\", {\n      headers: {\n        accessToken: localStorage.getItem(\"accessToken\")\n      }\n    }).then(data => {\n      setImage(result.data.image);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(ProfileContainer, {\n        requestsNoInfo: \"true\",\n        source: image,\n        name: nameUser,\n        changePassword: () => {\n          history.push(\"/userInfo\");\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [pedidos.status ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: pedidos.list.map(data => /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n              style: data.criado,\n              children: [\" \", /*#__PURE__*/_jsxDEV(\"h2\", {\n                children: [\"Pedido\", \":\", /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: data.titulo_pedido\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 95,\n                  columnNumber: 90\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                children: [\"Centro de custos: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: data.centro_custos\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 97,\n                  columnNumber: 63\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                children: [\"status: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: data.avaliacao_pedido\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 99,\n                  columnNumber: 53\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => {\n                history.push(\"/detPedido/\" + data.id_pedido);\n              },\n              children: \"detalhes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 37\n            }, this), data.avaliado ? /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) : /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => {\n                history.push(\"/review/\" + data.id_pedido);\n              },\n              children: \"Avaliar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 62\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"----------------------------\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 37\n            }, this), \"  \"]\n          }, data.id_pedido, true, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 33\n          }, this))\n        }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: pedidos.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 29\n          }, this)\n        }, void 0, false), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            history.push(\"/userInfo\");\n          },\n          children: \" Voltar \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(MyRequests, \"UY2C9GfkFuINCSkDULyKpMx05pQ=\", false, function () {\n  return [useHistory];\n});\n\n_c = MyRequests;\nexport default MyRequests;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyRequests\");","map":{"version":3,"sources":["/home/lucca/Documents/github/repro/front-end/reprografia_front-end/src/pages/myRequests/index.js"],"names":["React","useState","useEffect","useContext","useHistory","ProfileContainer","axios","MyRequests","history","pedidos","setPedidos","status","list","message","nameUser","setNameUser","image","setImage","get","headers","accessToken","localStorage","getItem","then","result","console","log","data","length","map","avaliacao_pedido","criado","color","margin","avaliado","atualizado","push","titulo_pedido","centro_custos","id_pedido"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\"\nimport ProfileContainer from \"../../components/profileContainer\";\nimport axios from 'axios';\n\n\nconst MyRequests = () => {\n\n    const history = useHistory();\n\n    var [pedidos, setPedidos] = useState({\n        status: false,\n        list: [],\n        message: \"\"\n    });\n\n    var [nameUser, setNameUser] = useState();\n    var [image, setImage] = useState();\n\n    useEffect(() => {\n        axios\n            .get(\"http://localhost:3002/meusPedidos\", {\n                headers: {\n                    accessToken: localStorage.getItem(\"accessToken\"),\n                },\n            })\n            .then((result) => {\n                console.log(result)\n                if (result.data.length > 0) {\n                    result.data.map((data) => {\n                        if (data.avaliacao_pedido === \"Ainda não avaliado.\") {\n                            data.avaliacao_pedido = \"Ainda Não avaliado! | Criado em:\" + data.criado\n\n                            //Setei algumas coisas para os elementos do nosso data, para que possamos usar isso no map lá embaixo,\n                            //e renderizar coisas diferentes dependendo do status da avaliação (se tiver sido avaliado fica de uma forma,\n                            // se não fica de outra, etc...)\n                            data.criado = { color: \"red\", margin: \"10px\" }\n\n                            //Aqui usei o campo de avaliado para mostrar o botão de avaliar caso o pedido ainda não tenha sido avaliado.\n                            data.avaliado = false\n                        }\n                        else {\n                            data.avaliacao_pedido += \" | Atualizado em:\" + data.atualizado\n\n                            //Setei algumas coisas para os elementos do nosso data, para que possamos usar isso no map lá embaixo,\n                            //e renderizar coisas diferentes dependendo do status da avaliação (se tiver sido avaliado fica de uma forma,\n                            // se não fica de outra, etc...)\n                            data.criado = { color: \"green\", margin: \"10px\" }\n\n                            //Aqui usei o campo de avaliado para mostrar o botão de avaliar caso o pedido ainda não tenha sido avaliado.\n                            data.avaliado = true\n                        }\n                        return null;\n                    })\n                    setPedidos({\n                        list: result.data,\n                        status: true\n                    })\n                }\n                else {\n                    setPedidos({\n                        message: result.data.message\n                    })\n                }\n            });\n\n\n            axios\n            .get(\"http://localhost:3002/meuUsuario\", {\n                headers: {\n                    accessToken: localStorage.getItem(\"accessToken\"),\n                },\n            }).then((data) =>{\n                setImage(result.data.image)\n            })\n    }, []);\n\n    return (\n        <>\n            <div className=\"content\">\n\n                <ProfileContainer requestsNoInfo = \"true\" source={image} name={nameUser} changePassword={() => {\n                    history.push(\"/userInfo\")\n                }} />\n                <div className=\"container\">\n                    {pedidos.status ?\n                        <>\n                            {pedidos.list.map((data) => (\n                                <React.Fragment key={data.id_pedido}> {/* é a mesma coisa que <> ... <> é a abreviação de <React.Fragment>\n                            A key é para referenciar uma key única para o map não se perder... e também parar de dar erro no console */}\n\n                                    <div style={data.criado}> {/* Setei a cor das palavras dentro da div lá em cima no UseEffect para estar passando um estilo diferente \n                                    se um pedido já tiver sido atualizado (vocês podem alterar depois a forma que querem exibir essa diferença, pode ser um border, talvez...) */}\n\n                                        <h2>Pedido{/*<N.ºspan>{data.id_pedido}</span>*/}:<span>{data.titulo_pedido}</span></h2>\n                                        {/* <h2>Realizado pelo usuário com Nif: <span>{data.nif}</span> </h2> */}\n                                        <h2>Centro de custos: <span>{data.centro_custos}</span></h2>\n\n                                        <h2>status: <span>{data.avaliacao_pedido}</span></h2>\n                                    </div>\n                                    <button onClick={() => { history.push(\"/detPedido/\" + data.id_pedido) }}>detalhes</button>\n                                    {data.avaliado ? <></> : <button onClick={() => { history.push(\"/review/\" + data.id_pedido) }}>Avaliar</button>}\n                                    <h3>----------------------------</h3>  {/* Só coloquei para separar, para nao\n                ter que mexer no css de voces e bagunçar algo lá... */}\n\n                                </React.Fragment>\n                            ))}\n\n                        </> :\n                        <>\n                            <h1>{pedidos.message}</h1>\n                        </>\n                    }\n                    <button onClick={() => { history.push(\"/userInfo\") }}> Voltar </button>\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default MyRequests;"]},"metadata":{},"sourceType":"module"}