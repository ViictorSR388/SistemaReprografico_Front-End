{"ast":null,"code":"var _jsxFileName = \"/home/lucca/Documents/github/repro/front-end/reprografia_front-end/src/pages/myRequests/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport ProfileContainer from \"../../components/profileContainer\";\nimport axios from 'axios';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MyRequests = () => {\n  _s();\n\n  const history = useHistory();\n  var [pedidos, setPedidos] = useState({\n    status: false,\n    list: [],\n    message: \"\"\n  });\n  var [nameUser, setNameUser] = useState();\n  var [image, setImage] = useState();\n  var [loading, setLoading] = useState();\n  useEffect(() => {\n    setLoading(true);\n    axios.get(\"http://localhost:3002/meusPedidos\", {\n      headers: {\n        accessToken: localStorage.getItem(\"accessToken\")\n      }\n    }).then(result => {\n      console.log(result);\n\n      if (result.data.length > 0) {\n        result.data.map(data => {\n          if (data.avaliacao_pedido === \"Ainda não avaliado.\") {\n            data.avaliacao_pedido = \"Ainda Não avaliado! | Criado em:\" + data.criado; //Setei algumas coisas para os elementos do nosso data, para que possamos usar isso no map lá embaixo,\n            //e renderizar coisas diferentes dependendo do status da avaliação (se tiver sido avaliado fica de uma forma,\n            // se não fica de outra, etc...)\n            // data.criado = { color: \"red\", margin: \"10px\" }\n            //Aqui usei o campo de avaliado para mostrar o botão de avaliar caso o pedido ainda não tenha sido avaliado.\n\n            data.avaliado = false;\n          } else {\n            data.avaliacao_pedido += \" | Atualizado em:\" + data.atualizado; //Setei algumas coisas para os elementos do nosso data, para que possamos usar isso no map lá embaixo,\n            //e renderizar coisas diferentes dependendo do status da avaliação (se tiver sido avaliado fica de uma forma,\n            // se não fica de outra, etc...)\n            // data.criado = { color: \"green\", margin: \"10px\" }\n            //Aqui usei o campo de avaliado para mostrar o botão de avaliar caso o pedido ainda não tenha sido avaliado.\n\n            data.avaliado = true;\n          }\n\n          return null;\n        });\n        setPedidos({\n          list: result.data,\n          status: true\n        });\n      } else {\n        setPedidos({\n          message: result.data.message\n        });\n      }\n    });\n    axios.get(\"http://localhost:3002/meuUsuario\", {\n      headers: {\n        accessToken: localStorage.getItem(\"accessToken\")\n      }\n    }).then(result => {\n      setImage(\"http://localhost:3002/\" + result.data.imagem);\n      setNameUser(result.data.nome);\n      setLoading(false);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: loading ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: \" Loading...\"\n      }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: \" \"\n      }, void 0, false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(MyRequests, \"N5P+22zm4pNU8sFFwI2o9gJRexU=\", false, function () {\n  return [useHistory];\n});\n\n_c = MyRequests;\nexport default MyRequests;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyRequests\");","map":{"version":3,"sources":["/home/lucca/Documents/github/repro/front-end/reprografia_front-end/src/pages/myRequests/index.js"],"names":["React","useState","useEffect","useContext","useHistory","ProfileContainer","axios","MyRequests","history","pedidos","setPedidos","status","list","message","nameUser","setNameUser","image","setImage","loading","setLoading","get","headers","accessToken","localStorage","getItem","then","result","console","log","data","length","map","avaliacao_pedido","criado","avaliado","atualizado","imagem","nome"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\"\nimport ProfileContainer from \"../../components/profileContainer\";\nimport axios from 'axios';\n\n\nconst MyRequests = () => {\n\n    const history = useHistory();\n\n    var [pedidos, setPedidos] = useState({\n        status: false,\n        list: [],\n        message: \"\"\n    });\n\n    var [nameUser, setNameUser] = useState();\n    var [image, setImage] = useState();\n    var [loading, setLoading] = useState();\n\n    useEffect(() => {\n        setLoading(true)\n        axios.get(\"http://localhost:3002/meusPedidos\", {\n            headers: {\n                accessToken: localStorage.getItem(\"accessToken\"),\n            },\n        })\n            .then((result) => {\n                console.log(result)\n                if (result.data.length > 0) {\n                    result.data.map((data) => {\n                        if (data.avaliacao_pedido === \"Ainda não avaliado.\") {\n                            data.avaliacao_pedido = \"Ainda Não avaliado! | Criado em:\" + data.criado\n\n                            //Setei algumas coisas para os elementos do nosso data, para que possamos usar isso no map lá embaixo,\n                            //e renderizar coisas diferentes dependendo do status da avaliação (se tiver sido avaliado fica de uma forma,\n                            // se não fica de outra, etc...)\n                            // data.criado = { color: \"red\", margin: \"10px\" }\n\n                            //Aqui usei o campo de avaliado para mostrar o botão de avaliar caso o pedido ainda não tenha sido avaliado.\n                            data.avaliado = false\n                        }\n                        else {\n                            data.avaliacao_pedido += \" | Atualizado em:\" + data.atualizado\n\n                            //Setei algumas coisas para os elementos do nosso data, para que possamos usar isso no map lá embaixo,\n                            //e renderizar coisas diferentes dependendo do status da avaliação (se tiver sido avaliado fica de uma forma,\n                            // se não fica de outra, etc...)\n                            // data.criado = { color: \"green\", margin: \"10px\" }\n\n                            //Aqui usei o campo de avaliado para mostrar o botão de avaliar caso o pedido ainda não tenha sido avaliado.\n                            data.avaliado = true\n                        }\n                        return null;\n                    })\n                    setPedidos({\n                        list: result.data,\n                        status: true\n                    })\n                }\n                else {\n                    setPedidos({\n                        message: result.data.message\n                    })\n                }\n                \n            });\n\n        axios.get(\"http://localhost:3002/meuUsuario\", {\n            headers: {\n                accessToken: localStorage.getItem(\"accessToken\"),\n            },\n        }).then((result) => {\n            setImage(\"http://localhost:3002/\" + result.data.imagem)\n            setNameUser(result.data.nome)\n            setLoading(false)\n        })\n    }, []);\n\n    return (\n        <>\n\n            <div className=\"content\">\n            {loading ? <> Loading...</> : <> </> }\n                \n            </div>\n        </>\n    )\n}\n\nexport default MyRequests;"]},"metadata":{},"sourceType":"module"}