{"ast":null,"code":"var _jsxFileName = \"/home/lucca/Documents/github/repro/front-end/reprografia_front-end/src/pages/myRequests/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport ProfileContainer from \"../../components/profileContainer\";\nimport axios from 'axios';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MyRequests = () => {\n  _s();\n\n  const history = useHistory();\n  var [pedidos, setPedidos] = useState({\n    status: false,\n    list: [],\n    message: \"\"\n  });\n  var [nameUser, setNameUser] = useState();\n  var [image, setImage] = useState();\n  var [loading, setLoading] = useState();\n  useEffect(() => {\n    setLoading(true);\n    axios.get(\"http://localhost:3002/meusPedidos\", {\n      headers: {\n        accessToken: localStorage.getItem(\"accessToken\")\n      }\n    }).then(result => {\n      console.log(result);\n\n      if (result.data.length > 0) {\n        result.data.map(data => {\n          if (data.avaliacao_pedido === \"Ainda não avaliado.\") {\n            data.avaliacao_pedido = \"Ainda Não avaliado! | Criado em:\" + data.criado; //Setei algumas coisas para os elementos do nosso data, para que possamos usar isso no map lá embaixo,\n            //e renderizar coisas diferentes dependendo do status da avaliação (se tiver sido avaliado fica de uma forma,\n            // se não fica de outra, etc...)\n            // data.criado = { color: \"red\", margin: \"10px\" }\n            //Aqui usei o campo de avaliado para mostrar o botão de avaliar caso o pedido ainda não tenha sido avaliado.\n\n            data.avaliado = false;\n          } else {\n            data.avaliacao_pedido += \" | Atualizado em:\" + data.atualizado; //Setei algumas coisas para os elementos do nosso data, para que possamos usar isso no map lá embaixo,\n            //e renderizar coisas diferentes dependendo do status da avaliação (se tiver sido avaliado fica de uma forma,\n            // se não fica de outra, etc...)\n            // data.criado = { color: \"green\", margin: \"10px\" }\n            //Aqui usei o campo de avaliado para mostrar o botão de avaliar caso o pedido ainda não tenha sido avaliado.\n\n            data.avaliado = true;\n          }\n\n          return null;\n        });\n        setPedidos({\n          list: result.data,\n          status: true\n        });\n      } else {\n        setPedidos({\n          message: result.data.message\n        });\n      }\n    });\n    axios.get(\"http://localhost:3002/meuUsuario\", {\n      headers: {\n        accessToken: localStorage.getItem(\"accessToken\")\n      }\n    }).then(result => {\n      setImage(\"http://localhost:3002/\" + result.data.imagem);\n      setNameUser(result.data.nome);\n      setLoading(false);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: loading ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: \" Loading...\"\n      }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(ProfileContainer, {\n          requestsNoInfo: \"true\",\n          source: image,\n          name: nameUser,\n          changePassword: () => {\n            history.push(\"/userInfo\");\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 49\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container\",\n          children: [pedidos.status ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: pedidos.list.map(data => /*#__PURE__*/_jsxDEV(React.Fragment, {\n              children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\" \", /*#__PURE__*/_jsxDEV(\"h2\", {\n                  children: [\"Pedido\", \":\", /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: data.titulo_pedido\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 97,\n                    columnNumber: 94\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 97,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                  children: [\"Centro de custos: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: data.centro_custos\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 99,\n                    columnNumber: 67\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 99,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                  children: [\"status: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: data.avaliacao_pedido\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 101,\n                    columnNumber: 57\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 101,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => {\n                  history.push(\"/detPedido/\" + data.id_pedido);\n                },\n                children: \"detalhes\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 41\n              }, this), data.avaliado ? /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) : /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => {\n                  history.push(\"/review/\" + data.id_pedido);\n                },\n                children: \"Avaliar\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 66\n              }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"----------------------------\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 41\n              }, this), \"  \"]\n            }, data.id_pedido, true, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 37\n            }, this))\n          }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: /*#__PURE__*/_jsxDEV(\"h1\", {\n              children: pedidos.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 33\n            }, this)\n          }, void 0, false), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              history.push(\"/userInfo\");\n            },\n            children: \" Voltar \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this), \" \"]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(MyRequests, \"N5P+22zm4pNU8sFFwI2o9gJRexU=\", false, function () {\n  return [useHistory];\n});\n\n_c = MyRequests;\nexport default MyRequests;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyRequests\");","map":{"version":3,"sources":["/home/lucca/Documents/github/repro/front-end/reprografia_front-end/src/pages/myRequests/index.js"],"names":["React","useState","useEffect","useContext","useHistory","ProfileContainer","axios","MyRequests","history","pedidos","setPedidos","status","list","message","nameUser","setNameUser","image","setImage","loading","setLoading","get","headers","accessToken","localStorage","getItem","then","result","console","log","data","length","map","avaliacao_pedido","criado","avaliado","atualizado","imagem","nome","push","titulo_pedido","centro_custos","id_pedido"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\"\nimport ProfileContainer from \"../../components/profileContainer\";\nimport axios from 'axios';\n\n\nconst MyRequests = () => {\n\n    const history = useHistory();\n\n    var [pedidos, setPedidos] = useState({\n        status: false,\n        list: [],\n        message: \"\"\n    });\n\n    var [nameUser, setNameUser] = useState();\n    var [image, setImage] = useState();\n    var [loading, setLoading] = useState();\n\n    useEffect(() => {\n        setLoading(true)\n        axios.get(\"http://localhost:3002/meusPedidos\", {\n            headers: {\n                accessToken: localStorage.getItem(\"accessToken\"),\n            },\n        })\n            .then((result) => {\n                console.log(result)\n                if (result.data.length > 0) {\n                    result.data.map((data) => {\n                        if (data.avaliacao_pedido === \"Ainda não avaliado.\") {\n                            data.avaliacao_pedido = \"Ainda Não avaliado! | Criado em:\" + data.criado\n\n                            //Setei algumas coisas para os elementos do nosso data, para que possamos usar isso no map lá embaixo,\n                            //e renderizar coisas diferentes dependendo do status da avaliação (se tiver sido avaliado fica de uma forma,\n                            // se não fica de outra, etc...)\n                            // data.criado = { color: \"red\", margin: \"10px\" }\n\n                            //Aqui usei o campo de avaliado para mostrar o botão de avaliar caso o pedido ainda não tenha sido avaliado.\n                            data.avaliado = false\n                        }\n                        else {\n                            data.avaliacao_pedido += \" | Atualizado em:\" + data.atualizado\n\n                            //Setei algumas coisas para os elementos do nosso data, para que possamos usar isso no map lá embaixo,\n                            //e renderizar coisas diferentes dependendo do status da avaliação (se tiver sido avaliado fica de uma forma,\n                            // se não fica de outra, etc...)\n                            // data.criado = { color: \"green\", margin: \"10px\" }\n\n                            //Aqui usei o campo de avaliado para mostrar o botão de avaliar caso o pedido ainda não tenha sido avaliado.\n                            data.avaliado = true\n                        }\n                        return null;\n                    })\n                    setPedidos({\n                        list: result.data,\n                        status: true\n                    })\n                }\n                else {\n                    setPedidos({\n                        message: result.data.message\n                    })\n                }\n\n            });\n\n        axios.get(\"http://localhost:3002/meuUsuario\", {\n            headers: {\n                accessToken: localStorage.getItem(\"accessToken\"),\n            },\n        }).then((result) => {\n            setImage(\"http://localhost:3002/\" + result.data.imagem)\n            setNameUser(result.data.nome)\n            setLoading(false)\n        })\n    }, []);\n\n    return (\n        <>\n\n            <div className=\"content\">\n                {loading ? <> Loading...</> : <><ProfileContainer requestsNoInfo=\"true\" source={image} name={nameUser} changePassword={() => {\n                    history.push(\"/userInfo\")\n                }} />\n                    <div className=\"container\">\n                        {pedidos.status ?\n                            <>\n                                {pedidos.list.map((data) => (\n                                    <React.Fragment key={data.id_pedido}> {/* é a mesma coisa que <> ... <> é a abreviação de <React.Fragment>\n                            A key é para referenciar uma key única para o map não se perder... e também parar de dar erro no console */}\n\n                                        <div /* style={data.criado} */ > {/* Setei a cor das palavras dentro da div lá em cima no UseEffect para estar passando um estilo diferente \n                                    se um pedido já tiver sido atualizado (vocês podem alterar depois a forma que querem exibir essa diferença, pode ser um border, talvez...) */}\n\n                                            <h2>Pedido{/*<N.ºspan>{data.id_pedido}</span>*/}:<span>{data.titulo_pedido}</span></h2>\n                                            {/* <h2>Realizado pelo usuário com Nif: <span>{data.nif}</span> </h2> */}\n                                            <h2>Centro de custos: <span>{data.centro_custos}</span></h2>\n\n                                            <h2>status: <span>{data.avaliacao_pedido}</span></h2>\n                                        </div>\n                                        <button onClick={() => { history.push(\"/detPedido/\" + data.id_pedido) }}>detalhes</button>\n                                        {data.avaliado ? <></> : <button onClick={() => { history.push(\"/review/\" + data.id_pedido) }}>Avaliar</button>}\n                                        <h3>----------------------------</h3>  {/* Só coloquei para separar, para nao\n                ter que mexer no css de voces e bagunçar algo lá... */}\n\n                                    </React.Fragment>\n                                ))}\n\n                            </> :\n                            <>\n                                <h1>{pedidos.message}</h1>\n                            </>\n                        }\n                        <button onClick={() => { history.push(\"/userInfo\") }}> Voltar </button>\n                    </div> </>}\n\n            </div>\n        </>\n    )\n}\n\nexport default MyRequests;"]},"metadata":{},"sourceType":"module"}